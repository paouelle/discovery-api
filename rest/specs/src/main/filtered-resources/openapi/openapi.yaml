# /**
#  * Copyright (c) Connexta
#  *
#  * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU
#  * Lesser General Public License as published by the Free Software Foundation, either version 3 of
#  * the License, or any later version.
#  *
#  * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
#  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public
#  * License is distributed along with this program and can be found at
#  * <http://www.gnu.org/licenses/lgpl.html>.
#  */
openapi: 3.0.2

info:
  version: ${project.version}
  title: Discovery API Specification
  description: >
    The discovery API is defined to allow automatic registration of remote systems with Ion and
    to provide periodic notifications (a.k.a. heartbeats) of the system's presence and availability.
  contact:
    name: Connexta
  license:
    name: GNU Lesser General Public License
    url: 'http://www.gnu.org/licenses/lgpl.html'

servers:
  - url: ${rest.server.url}

paths:
  /heartbeat:
    parameters:
      - $ref: '#/components/parameters/AcceptVersion'
      - $ref: '#/components/parameters/Echo'
    post:
      summary: Heartbeat notification from a remote system.
      description: >
        Remote systems are expected to report their presence on a regular basis and whenever network
        connectivity has been restored using this endpoint.

        Clients may be redirected at the server's leisure. Typical successful response would be 204
        as no content would be returned.
      operationId: heartbeat
      tags:
        - discovery
      requestBody:
        $ref: '#/components/requestBodies/Heartbeat'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '200':
          $ref: '#/components/responses/OK'
        '307':
          $ref: '#/components/responses/TemporaryRedirect'
        '308':
          $ref: '#/components/responses/PermanentRedirect'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '501':
          $ref: '#/components/responses/NotImplemented'
        default:
          $ref: '#/components/responses/DefaultError'

components:
  requestBodies:
    Heartbeat:
      description: Remote system presence information.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SystemInfo'
  responses:
    NoContent:
      description: The system's information was accepted.
      headers:
        'Content-Version':
          $ref: '#/components/headers/ContentVersion'
    OK:
      description: >
        The system's information was accepted. The only time a 200 response will be returned is
        when echoing was requested by the client via the *Echo* request header.
      headers:
        'Content-Version':
          $ref: '#/components/headers/ContentVersion'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseMessage'
    TemporaryRedirect:
      description: >
        The heartbeat resource has temporarily moved to the specified location and the remote
        system should re-issue the message right away to the specified location. All subsequent
        heartbeat notifications should be sent to the original location.
      headers:
        'Location':
          $ref: '#/components/headers/Location'
        'Content-Version':
          $ref: '#/components/headers/ContentVersion'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseMessage'
    PermanentRedirect:
      description: >
        The heartbeat resource has permanently moved to the specified location and the remote
        system should re-issue the message right away to the specified location. All subsequent
        heartbeat notifications should be sent to the specified location.
      headers:
        'Location':
          $ref: '#/components/headers/Location'
        'Content-Version':
          $ref: '#/components/headers/ContentVersion'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseMessage'
    Unauthorized:
      description: The client could not be authenticated.
      headers:
        'Content-Version':
          $ref: '#/components/headers/ContentVersion'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    NotImplemented:
      description: >
        The requested API version is not supported and therefore not implemented.
        Possible codes reported are:

        - 501001 - Unable to parse *Accept-Version*

        - 501002 - The provided major version is no longer supported

        - 501003 - The provided major version is not yet supported by the server

        - 501004 - The provided minor version is not yet supported by the server
      headers:
        'Content-Version':
          $ref: '#/components/headers/ContentVersion'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    BadRequest:
      description: >
        The client message could not be understood by the server due to invalid format or syntax.
      headers:
        'Content-Version':
          $ref: '#/components/headers/ContentVersion'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    DefaultError:
      description: Any other possible errors not currently known.
      headers:
        'Content-Version':
          $ref: '#/components/headers/ContentVersion'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'

  parameters:
    AcceptVersion:
      in: header
      name: Accept-Version
      description: >
        The API version used by the client to produce the REST message. The client will accept
        responses marked with any minor versions after this one. It does imply that all future
        minor versions of the message are backward compatible with all previous minor versions of
        the same message.
      required: true
      schema:
        $ref: '#/components/schemas/Version'
      examples:
        major.minor:
          value: '1.2'
          summary: A released minor version
        major.minor.patch:
          value: '1.0.3'
          summary: A patched version
        dev:
          value: '1.2.0-SNAPSHOT'
          summary: A development version
    Echo:
      in: header
      name: Echo
      description: >
        A boolean flag indicating that the server should echo back in the response under a
        property named *echoed.parameters*, the parameters from the request it understood and used.
        It should also include the default value of any optional parameters (and properties) not
        specified. This should only be used during contract testing to ensure the right parameter
        (and property) names are being specified and to ensure the proper default values are being
        used by the server.
      required: false
      schema:
        type: boolean
        default: false

  headers:
    ContentVersion:
      description: >
        The API version used by the server to produce the REST message. The server will accept
        messages for any minor versions prior to this one.
      required: true
      schema:
        $ref: '#/components/schemas/Version'
      examples:
        major.minor:
          value: '1.2'
          summary: A released minor version
        major.minor.patch:
          value: '1.0.3'
          summary: A patched version
        dev:
          value: '1.2.0-SNAPSHOT'
          summary: A development version
    Location:
      description: The new location where the remote system should report its presence.
      required: true
      schema:
        type: string
        format: uri
      example: ${rest.server.url}/xyz

  schemas:
    Version:
      description: Version number.
      type: string
      minLength: 3
      maxLength: 80
      pattern: '^([1-9]([0-9]+)?)\.(0|([1-9]([0-9]+)?))(\.(0|([1-9]([0-9]+)?))(-.*)?)?$'
      example: 1.2, 2.4.3, 0.2.5-SNAPSHOT
    ContactInfo:
      description: Contact information about a system.
      type: object
      required:
        - email
      properties:
        name:
          type: string
          description: The name of the contact person.
          minLength: 1
          maxLength: 255
          example: Bob Patterson
        email:
          type: string
          format: email
          description: The email address for the contact person.
          minLength: 1
          maxLength: 255
          example: bob.patterson@acme.org
    SystemInfo:
      description: Information about a system.
      type: object
      required:
        - id
        - name
        - product
        - version
        - url
      properties:
        id:
          type: string
          description: >
            A system advertised identifier that is meant to uniquely identify the system. The
            identifier is not guaranteed to be unique from Ion's perspective which might be forced
            to use other properties to uniquely identify the system registering. This identifier is
            typically generated differently based on the advertised product and/or version.
          minLength: 1
          maxLength: 80
          example: abcd-01234-xxxx
        name:
          type: string
          description: >
            The name of the remote system (a.k.a. site name). This name will be displayed to an
            administrator when showing the remote system.
          minLength: 1
          maxLength: 255
          example: Acme Intelligence Node
        organization:
          type: string
          description: The organization the remote system belongs to.
          minLength: 1
          maxLength: 255
          example: Acme Organization
        contact:
          $ref: '#/components/schemas/ContactInfo'
        product:
          type: string
          description: >
            The type of product the remote system is. This will help Ion determine how to
            communicate and what functionalities are available.
          minLength: 1
          maxLength: 20
          example: ddf, alliance, ...
        version:
          type: string
          description: >
            The version of the product installed on the remote system. This will help Ion
            determine how to best communicate with the system.
          minLength: 1
          maxLength: 80
          example: 4.6.9
        url:
          type: string
          format: uri
          description: >
            An externally accessible url where the remote system is hosting REST services that can
            can be reached. For DDF-based systems, this would be the base url for the CSW and
            GraphQL endpoints.
          example: https://myhost:8993/services
    ResponseMessage:
      description: >
        Response message which can optionally include the echoed parameters that were understood
        from the original request.
      type: object
      properties:
        echoed.parameters:
          $ref: '#/components/schemas/SystemInfo'
    ErrorMessage:
      description: Error message information (based on default Spring error message).
      type: object
      required:
        - timestamp
        - path
        - status
        - error
        - message
      properties:
        timestamp:
          type: string
          format: date-time
          description: The server time when the error was generated.
          minLength: 1
          maxLength: 28
          example: 2019-05-09T14:47:13.101+0000
        path:
          type: string
          description: The path for the REST endpoint that generated this error.
          minLength: 1
          maxLength: 2048
          example: /heartbeat
        status:
          type: integer
          format: int32
          description: The corresponding HTTP status code.
          minimum: 100
          maximum: 599
          example: 400
        code:
          type: integer
          format: int32
          description: >
            An optional and more specific code corresponding to the error (specific codes need to be
            documented as part of the API operation). This code allows a given category of
            errors (e.g. 501: Not Implemented) to be more specific as to why.
        error:
          type: string
          description: The corresponding HTTP reason phrase.
          example: Bad Request
          minLength: 1
        message:
          type: string
          description: Specific information about the error.
          minLength: 1
          example: Validation failed for object='systemInfo'.
        details:
          type: array
          items:
            type: string
          description: Optional detailed information about the error.
