# /**
#  * Copyright (c) Connexta
#  *
#  * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU
#  * Lesser General Public License as published by the Free Software Foundation, either version 3 of
#  * the License, or any later version.
#  *
#  * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
#  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public
#  * License is distributed along with this program and can be found at
#  * <http://www.gnu.org/licenses/lgpl.html>.
#  */
openapi: 3.0.2

info:
  version: ${project.version}
  title: ${project.name}
  description: >
    The discovery API is defined to allow automatic registration of remote systems with Ion and
    to provide periodic notifications (a.k.a. heartbeats) of the system's presence and availability.
  contact:
    name: Connexta
  license:
    name: GNU Lesser General Public License
    url: 'http://www.gnu.org/licenses/lgpl.html'

servers:
  - url: ${rest.server.url}

paths:
  /heartbeat:
    parameters:
      - $ref: 'commons.yaml#/components/parameters/AcceptVersion'
      - $ref: 'commons.yaml#/components/parameters/Echo'
    post:
      summary: Heartbeat notification from a remote system.
      description: >
        Remote systems are expected to report their presence on a regular basis and whenever network
        connectivity has been restored using this endpoint.

        Clients may be redirected at the server's leisure. Typical successful response would be 204
        as no content would be returned.
      operationId: heartbeat
      tags:
        - discovery
      requestBody:
        $ref: '#/components/requestBodies/Heartbeat'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '200':
          $ref: '#/components/responses/OK'
        '307':
          $ref: '#/components/responses/TemporaryRedirect'
        '308':
          $ref: '#/components/responses/PermanentRedirect'
        '400':
          $ref: 'commons.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'commons.yaml#/components/responses/Unauthorized'
        '501':
          $ref: 'commons.yaml#/components/responses/NotImplemented'
        default:
          $ref: 'commons.yaml#/components/responses/DefaultError'

components:
  requestBodies:
    Heartbeat:
      description: >
        Remote system presence information.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SystemInfo'
  responses:
    NoContent:
      description: The system's information was accepted.
      headers:
        'Content-Version':
          $ref: 'commons.yaml#/components/headers/ContentVersion'
    OK:
      description: >
        The system's information was accepted. The only time a 200 response will be returned is
        when echoing was requested by the client via the *Echo* request header.
      headers:
        'Content-Version':
          $ref: 'commons.yaml#/components/headers/ContentVersion'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseMessage'
    TemporaryRedirect:
      description: >
        The heartbeat resource has temporarily moved to the specified location and the remote
        system should re-issue the message right away to the specified location. All subsequent
        heartbeat notifications should be sent to the original location.
      headers:
        'Location':
          $ref: '#/components/headers/Location'
        'Content-Version':
          $ref: 'commons.yaml#/components/headers/ContentVersion'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseMessage'
    PermanentRedirect:
      description: >
        The heartbeat resource has permanently moved to the specified location and the remote
        system should re-issue the message right away to the specified location. All subsequent
        heartbeat notifications should be sent to the specified location.
      headers:
        'Location':
          $ref: '#/components/headers/Location'
        'Content-Version':
          $ref: 'commons.yaml#/components/headers/ContentVersion'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseMessage'

  headers:
    Location:
      description: >
        The new location where the remote system should report its presence.
      required: true
      schema:
        type: string
        format: uri
      example: ${rest.server.url}/xyz

  schemas:
    ContactInfo:
      description: Contact information about a system.
      type: object
      required:
        - email
      properties:
        name:
          type: string
          description: >
            The name of the contact person.
          minLength: 1
          example: Bob Patterson
        email:
          type: string
          format: email
          description: >
            The email address for the contact person.
          example: bob.patterson@acme.org
    SystemInfo:
      description: Information about a system.
      type: object
      required:
        - id
        - name
        - product
        - version
        - url
      properties:
        id:
          type: string
          description: >
            A system advertised identifier that is meant to uniquely identify the system. The
            identifier is not guaranteed to be unique from Ion's perspective which might be forced
            to use other properties to uniquely identify the system registering. This identifier is
            typically generated differently based on the advertised product and/or version.
          minLength: 1
          example: abcd-01234-xxxx
        name:
          type: string
          description: >
            The name of the remote system (a.k.a. site name). This name will be displayed to an
            administrator when showing the remote system.
          minLength: 1
          example: Acme Intelligence Node
        organization:
          type: string
          description: >
            The organization the remote system belongs to.
          example: Acme Organization
        contact:
          $ref: '#/components/schemas/ContactInfo'
        product:
          type: string
          description: >
            The type of product the remote system is. This will help Ion determine how to
            communicate and what functionalities are available.
          minLength: 1
          example: ddf, alliance, ...
        version:
          type: string
          description: >
            The version of the product installed on the remote system. This will help Ion
            determine how to best communicate with the system.
          minLength: 1
          example: 4.6.9
        url:
          type: string
          format: uri
          description: >
            An externally accessible url where the remote system is hosting REST services that can
            can be reached. For DDF-based systems, this would be the base url for the CSW and
            GraphQL endpoints.
          example: https://myhost:8993/services
    ResponseMessage:
      description: >
        Response message which can optionally includes the echoed parameters that were understood
        from the original request.
      type: object
      properties:
        echoed.parameters:
          $ref: '#/components/schemas/SystemInfo'
